=================================
Outils de d√©veloppement en Python
=================================

Vous voulez programmer en Python ? Merveilleux ! Vous vous √™tes peut-√™tre d√©j√† munis d'un [√©diteur de texte](Installer-un-√©diteur-de-texte-(Atom)) multi-fonctions, et vous pensez pr√™ts √† relever tous les d√©fis. Laissez-moi vous pr√©senter quelques autres composantes de la bo√Æte √† outils du d√©veloppeur Python moderne.

.. note::
  Cette page a √©t√© r√©dig√©e par un habitu√© d'Unix (Linux, macOS). Si vous utilisez ces outils sous Windows et que vous remarquez des diff√©rences dans les instructions √† suivre par rapport √† Unix, n'h√©sitez pas √† apporter votre contribution !

.. tip::
  Si vous voulez en lire plus sur le sujet, je vous recommande vivement `The Hitchhiker's Guide to Python <http://docs.python-guide.org/en/latest/>`_. C'est une sorte de guide qui traite d'√©norm√©ment de sujets, li√©s √† la fois directement et indirectement √† Python : la structure d'un projet, le *code style*, la documentation, les tests, les frameworks et packages utiles class√©s par sc√©nario d'utilisation, etc...

G√©rer ses packages avec Pip
===========================

Pip, qu'est-ce que c'est ?
--------------------------

.. _PyPI : https://pypi.python.org/pypi
.. _Pip : https://pip.pypa.io/en/stable/)
.. _PipDoc : https://pip.pypa.io/en/stable/installing/

Vous le savez, Python b√©n√©ficie d'une communaut√© tr√®s dynamique. PyPI_, le *Python Package Index*, est l'endroit o√π les d√©veloppeurs du monde entier peuvent publier des packages pour qu'ils soient utilis√©s par d'autres personnes. Il y a aujourd'hui pr√®s de 120 000 packages publi√©s sur PyPI ! üòÆ

Pip_ est un gestionnaire de d√©pendances (pour ne pas dire LE gestionnaire de d√©pendances) pour Python. Avec Pip :

- Vous installez des packages disponibles sur PyPI avec la ligne de commande ;
- La gestion des d√©pendances (packages n√©cessaires au fonctionnement d'autres packages) est grandement simplifi√©e.

Prenez un exemple : imaginons que vous vouliez utiliser NumPy pour faire quelques calculs matriciels. Vous lancez un interpr√©teur Python et importez NumPy :
::
  >>> import numpy
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  ModuleNotFoundError: No module named 'numpy'

Mince ! NumPy n'est pas encore install√© ! Avec Pip, vous pouvez l'installez tr√®s facilement :
::
  $ pip install numpy

Et voil√†, le tour est jou√© !
::
  >>> import numpy
  >>> numpy.__version__
  '1.11.3'

Installer Pip
-------------

Si vous utilisez la version 3.4+ de Python, bonne nouvelle : Pip est d√©j√† install√© ! üéâ

Pour les versions ‚â§ 3.3, il vous faut l'installer vous-m√™mes. Le processus d'installation n'a rien de compliqu√© et vous le trouverez dans `la documentation officielle de Pip <PipDoc_>`_ que vous pouvez d'ailleurs consulter pour avoir plus d'informations sur Pip et ses usages. üòâ

.. attention::
  Sur certains OS, le nom d'ex√©cutable ``pip`` est r√©serv√© √† la version de Pip pour Python 2.x. C'est le cas de macOS notamment. Il se peut que vous deviez utiliser ``pip3`` et non ``pip``.

Usage de Pip
------------

Installer un package
********************

Cela se fait avec la commande ``$ pip install <package-name>``. Vous pouvez donner plusieurs noms de packages pour en installer plusieurs en m√™me temps.
::
  $ pip install django
  $ pip install numpy matplotlib scipy


Lister les packages install√©s
*****************************

Vous pouvez obtenir la liste des packages install√©s sur votre machine √† l'aide de la commande ``freeze`` :
::
  $ pip freeze
  autopep8==1.2.4
  beautifulsoup4==4.6.0
  bokeh==0.12.5
  click==6.7
  cycler==0.10.0
  Django==1.11.5
  entrypoints==0.2.2
  flake8==3.4.1
  ...

Les environnements virtuels avec VirtualEnv
===========================================

.. _VirtualEnv: https://virtualenv.pypa.io/en/stable/)
.. _VirtualEnvDocs: https://virtualenv.pypa.io/en/stable/

VirtualEnv_ est un outil qui permet de cr√©er des environnements Python isol√©s. VirtualEnv vous permet de cr√©er un dossier unique o√π sont regroup√©s √† la fois une distribution de Python (par exemple Python 3.6) et des packages install√©s dans cet environnement.

.. note::
  Cela peut para√Ætre farfelu, mais l'id√©e est en fait toute simple. Lorsque vous travaillez sur diff√©rents projets, il arrive tr√®s souvent que ceux-ci n√©cessitent certains packages et dans certaines versions, qui peuvent √™tre diff√©rentes. Si un projet ``A`` n√©cessite un package ``P`` en version ``X`` et le projet ``B`` n√©cessite ``P`` en version ``Y``, vous voyez bien qu'il y a un probl√®me √† installer ``P`` "globalement" sur votre ordinateur, car vous ne pouvez installer qu'une seule version √† la fois ! Vous avez besoin donc **d'isoler** l'environnement des projets ``A`` et ``B``, et c'est l√† que des outils comme VirtualEnv interviennent.

Pour plus d'informations sur VirtualEnv, n'h√©sitez pas √† aller voir `la documentation officielle <VirtualEnvDocs_>`_.

Installer VirtualEnv
--------------------

Maintenant que vous avez install√© Pip, cela se fait en un tour de mains :
::
  $ pip install virtualenv

Tada ! Vous devriez maintenant avoir √† disposition en ligne de commande un ex√©cutable ``virtualenv``. V√©rifiez-le de cette fa√ßon :
::
  $ virtualenv --version
  15.1.0

Usage de VirtualEnv
--------------------

Cr√©ation d'un environnement virtuel
************************************

L'usage basique de VirtualEnv est le suivant : placez-vous dans un r√©pertoire o√π vous souhaitez installer l'environnement virtuel (ici nous nous situons dans un dossier ``mon-projet``), et saisissez :
::
  mon-projet $ virtualenv env

Cela cr√©era un environnement virtuel appel√© ``env`` (vous pouvez l'appeler comme vous voulez). Vous devriez voir quelques lignes de log vous indiquant que VirtualEnv installe une distribution de Python et quelques packages de base (normalement ``setuptools``, ``wheels`` et... ``pip`` !).

.. note::
  Par d√©faut, VirtualEnv installe la version de Python la plus r√©cente qu'il trouve sur votre ordinateur. Vous pouvez sp√©cifier la version de Python √† utiliser pour l'environnement virtuel avec le param√®tre ``-p``. Par exemple :
  ::
    mon-projet $ virtualenv env -p python3.4


Entrer dans un environnement virtuel
************************************

Pour entrer dans l'environnement virtuel, il faut **l'activer**. Sur les syst√®mes Unix (macOS, Linux), cela se fait comme ci-dessous. Une fois l'environnement activ√©, le nom de l'environnement appara√Æt entre parenth√®ses au d√©but de la ligne de commande :
::
  mon-projet $ source env/bin/activate
  (env) mon-projet $  # l'environnement est activ√© !

Pour sortir de l'environnement virtuel, utilisez la commande `deactivate` :
::
  (env) mon-projet $ deactivate
  mon-projet $  # nous voil√† sortis de l'environnement virtuel !

Lorsque l'environnement est actif, vous avez acc√®s aux Python et Pip de l'environnement par les ex√©cutables `python` et `pip`. Vous pouvez installer des packages avec Pip comme vous le feriez au niveau global, sauf que ceux-ci seront uniquement install√©s dans l'environnement virtuel ! La preuve, en supposant que NumPy n'est pas install√© au niveau global :
::
  (env) mon-projet $ pip install numpy
  # -c permet d'ex√©cuter un script √©crit directement en ligne de commande
  (env) mon-projet $ python -c 'import numpy; print(numpy.__version__)'
  1.11.3
  (env) mon-projet $ deactivate
  mon-projet $ python -c 'import numpy'
  Traceback (most recent call last):
    File "<string>", line 1, in <module>
  ModuleNotFoundError: No module named 'numpy'

En mode interactif avec IPython
===============================

.. _IPython: https://ipython.org
.. _Jupyter: https://jupyter.readthedocs.io/en/latest/

IPython_ signifie "Interactive Python". Vous connaissez l'interpr√©teur Python classique ? IPython le rend 100x mieux. Je ne peux pas vous expliquer toutes les fonctionnalit√©s qu'IPython ajoute √† l'interpr√©teur classique, je vous renvoie pour cela √† la documentation officielle, mais en voici quelques unes :

- Ajout de couleurs √† l'interpr√©teur ‚Äî extr√™mement pratique !

.. image:: /media/ipython-colors.png

- Autocompl√©tions √† tout va (variables, imports...) avec Tab et les fl√®ches haut/bas ‚Äî extr√™mement pratique !

.. image:: /media/ipython-autocomplete.png

- Appel √† la documentation en ajoutant `?` derri√®re un objet ‚Äî extr√™mement pratique !

.. image:: /media/ipython-help.png

- Utilisation des outils de ligne de commande comme `ls` ou `cd` directement dans IPython ‚Äî extr√™mement pratique !

.. image:: /media/ipython-shellbin.png

- Et bien d'autres choses !

Bref : IPython c'est *extr√™mement pratique*. üòÅ

Si vous voulez en d√©couvrir encore plus sur le Python interactif, jetez un ≈ìil √† Jupyter_ et ses notebooks.
