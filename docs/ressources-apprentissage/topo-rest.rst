===========================
Petit topo sur les API Rest
===========================

Qu'est-ce qu'une API ?
======================

Commen√ßons par la base : une API, k√©sako ? Wikipedia nous dit :

  En informatique, une interface de programmation applicative (souvent d√©sign√©e par le terme API pour Application Programming Interface) est un ensemble normalis√© de classes, de m√©thodes ou de fonctions qui sert de fa√ßade par laquelle un logiciel offre des services √† d'autres logiciels. Elle est offerte par une biblioth√®que logicielle ou un service web, le plus souvent accompagn√©e d'une description qui sp√©cifie comment des programmes consommateurs peuvent se servir des fonctionnalit√©s du programme fournisseur.

Autrement dit, une API fournit un ensemble de services et nous dit comment on les utilise.

En √©quation : **API = ‚öôÔ∏è + üìñ**.

Dans le domaine du web, le terme API d√©signe plus sp√©cifiquement les services qu'un client (votre navigateur, par exemple) peut utiliser pour interagir avec une autre application.

Il existe toutes sortes d'API. Par exemple :

.. _Facebook Login : https://developers.facebook.com/docs/facebook-login/
.. _Twitter for Websites : https://dev.twitter.com/web/overview

- L'API `Facebook Login`_, qui permet d'int√©grer un bouton "Se connecter avec Facebook" sur son site ;
- L'API `Twitter for Websites`_ qui permet d'ajouter des murs de tweets √† un site ;
- L'API d'authentification de ViaR√©zo qui permet d'authentifier des visiteurs par leur compte ViaR√©zo !
- Etc...

Les sp√©cificit√©s des API REST
=============================

.. _TutsPlusHTTP: https://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177

Une API REST est une API qui permet d'acc√©der aux ressources d'une application. Concr√®tement, elle vous permet de questionner la base de donn√©es via une simple requ√™te HTTP et de r√©cup√©rer les donn√©es dans un format conventionnel (le plus souvent JSON ou XML).

.. important::
  On a tous entendu parler d'HTTP, mais on ne sait pas forc√©ment vraiment comment ce protocole fonctionne. N'h√©sitez pas √† vous renseigner sur le sujet car c'est un aspect crucial pour la cr√©ation d'APIs REST ! Par exemple, `cet article <TutsPlusHTTP_>`_ de TutsPlus.

En fait, une API REST permet non seulement de r√©cup√©rer des donn√©es, mais √©galement d'en envoyer afin de r√©aliser des op√©rations sur elles. En effet, chaque op√©ration classique des bases de donn√©es relationnelles (CRUD : Create, Read, Update, Delete) peut √™tre mise en correspondance avec une m√©thode HTTP :

- Create => POST : cr√©ation d'enregistrements dans la BDD
- Read => GET : r√©cup√©ration d'enregistrements dans la BDD
- Update => PUT : mise √† jour d'enregistrements existants dans la BDD
- Delete => DELETE : suppression d'enregistrements dans la BDD

Les API REST informent donc le service web de l'op√©ration demand√©e gr√¢ce √† la m√©thode HTTP employ√©e.

Enfin, parce qu'elles utilisent des standards du web (le protocole HTTP, JSON, XML...), les API REST sont extr√™mement flexibles et servent en fait de "colle" entre des services web qui veulent √©changer des donn√©es.

Concr√®tement, √† quoi √ßa ressemble une API REST ?
================================================

Concr√®tement, une API REST fournit des *endpoints*, ou points d'entr√©es, d'o√π on peut interagir avec le service web. Pour faire simple, on peut consid√©rer **qu'un point d'entr√©e est enti√®rement d√©termin√© par son URL et la m√©thode HTTP employ√©e.**

Pour prendre un exemple, imaginons qu'on dispose d'une API OSER qui nous permet d'interroger une base de donn√©es des tutor√©s.

Cette API pourrait par exemple d√©finir les points d'entr√©e suivants :
::
  GET http://oser-cs.fr/api/students/ : retrieve all students
  GET http://oser-cs.fr/api/students/{id}/ : retrieve a student by id
  POST http://oser-cs.fr/api/students/ : create a new student

Ainsi, pour r√©cup√©rer les donn√©es du tutor√© correspondant √† ``id = 1``, on pourrait envoyer une requ√™te GET √† ``http://oser-cs.fr/api/students/1``. On obtiendrait des donn√©es pouvant avoir cette t√™te-l√† :
::
  {
      "id": 1,
      "first_name": "Jean",
      "last_name": "Dupont",
      "school": "Lyc√©e Jean Jaur√®s",
      ...
  }

Si la requ√™te est faite depuis un navigateur web via du code Javascript, on peut alors utiliser l'objet JSON obtenu pour, par exemple, effectuer le rendu de la page contenant les informations du lyc√©en.

Conclusion
==========

.. _restful : https://www.ibm.com/developerworks/library/ws-restful/index.html

On s'aper√ßoit donc qu'en r√©sum√©, le grand avantage des API REST est de totalement d√©coupler les services *backend* (tout ce qui a trait √† la gestion de la BDD) et les services *frontend* (tout ce qui attrait au rendu des donn√©es sur le navigateur).

Si vous vous demandiez encore pourquoi tout ceci nous int√©resse : une API REST pour le site OSER va nous permettre de faire communiquer le backend (construit avec Django) et le frontend (construit avec JS/React) üéâ !

Si vous voulez en savoir plus sur l'architecture REST, jetez un ≈ìil √† `cet article <restful_>`_.
