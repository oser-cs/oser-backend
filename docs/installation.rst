============
Installation
============

Cette page vous indique √©tape par √©tape comme installer l'environnement de d√©veloppement du backend du site. √Ä la fin de ce processus, vous aurez un backend local fonctionnel !

Pr√©requis
=========

Vous aurez besoin de `Git <https://git-scm.com>`_ pour cloner le d√©p√¥t.

Le backend du site repose sur Django et donc Python. Munissez-vous de `Python 3.5+ <https://www.python.org/downloads/>`_ et de `virtualenv <https://pypi.python.org/pypi/virtualenv>`_ si ce n'est pas encore fait. Vous pouvez aussi consulter la page :doc:`ressources-apprentissage/dev-python` pour plus d'informations sur l'installation et l'utilisation de ``virtualenv``.

Installation des d√©pendances
============================

Tout d'abord, clonez le d√©p√¥t sur votre ordinateur :
::
  $ git clone https://github.com/oser-cs/oser-backend.git
  $ cd oser-backend

Cr√©ez ensuite un environnement virtuel (ici appel√© ``env``) puis activez-le :
::
  oser-backend $ virtualenv env -p python 3
  oser-backend $ source env/bin/activate

Installez les d√©pendances Python en utilisant ``pip`` :
::
  (env) oser-backend $ pip install -r requirements.txt

Configuration de la base de donn√©es
===================================

Tout d'abord, cr√©ez puis ex√©cutez les migrations Django :
::
  (env) oser-backend $ cd oser_backend
  (env) oser_backend $ python manage.py makemigrations
  (env) oser_backend $ python manage.py migrate

Lancez les tests pour vous assurer que tout fonctionne comme pr√©vu :
::
  (env) oser_backend $ python manage.py test

Optionnel : vous pouvez peupler la BDD de d√©veloppement avec de "fausses donn√©es" en utilisant la commande ``populatedb`` :
::
  (env) oser_backend $ python manage.py populatedb

D√©marrage du site en mode d√©veloppement
=======================================

Vous en fait avez besoin de d√©marrer deux serveurs : le serveur backend avec Django et le serveur frontend avec npm (le second communicant avec le premier via l'API).

D√©marrez le serveur local Django avec la commande ``runserver`` :
::
  (env) oser_backend $ python manage.py runserver

Si vous vous rendez √† l'adresse `http://localhost:8000/api/ <http://localhost:8000/api/>`_, vous devriez arriver √† la racine de l'API comme ci-dessous. Si c'est le cas, le serveur Django est fonctionnel ! üëç

.. image:: media/api_home.png



D√©tail des d√©pendances
======================

.. _Django : https://www.djangoproject.com
.. _release news: https://www.djangoproject.com/weblog/2017/dec/02/django-20-released/)
.. _Django REST Framework : http://www.django-rest-framework.org
.. _DRY Rest Permissions : https://github.com/dbkaplan/dry-rest-permissions
.. _FactoryBoy : http://factoryboy.readthedocs.io/en/latest/index.html

Django
******

Django_ est un framework de d√©veloppement web pour Python.

Le site d'OSER utilise Django en version 2.0.

> √Ä l'heure actuelle, peu de tutoriels Django se basent sur la version 2.0, mais il y a en fait tr√®s peu de changements non-r√©tro-compatibles par rapport √† la version 1.11, et aucun changement n'est r√©ellement critique. Les am√©liorations apport√©es par la version 2.0 sont int√©ressantes, on peut notamment citer le syst√®me d'√©criture des URLs qui est grandement simplifi√©. Pour plus d'infos, lire la `release news`_ associ√©e.

Django REST Framework
*********************

Le `Django REST Framework`_ (DRF) permet d'√©crire facilement des API REST avec Django.

Le site d'OSER utilise le DRF en version 3.7.3. Cette version est enti√®rement compatible avec Django 2.0.

DRY Rest Permissions
********************

`DRY Rest Permissions`_ est utilis√© pour d√©finir les permissions directement sur les mod√®les Django.

FactoryBoy
**********

`FactoryBoy`_ est utilis√© pour faciliter la cr√©ation d'objets de test en d√©finissant des usines (*factories*) directement √† partir des mod√®les Django. Les usines sont d√©finies dans ``oser_backend/tests/factory.py``.
